# Generated from cal.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,9,72,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,1,0,3,0,21,8,0,1,0,4,0,24,8,0,11,0,12,0,25,
        1,0,1,0,4,0,30,8,0,11,0,12,0,31,3,0,34,8,0,1,1,3,1,37,8,1,1,1,4,
        1,40,8,1,11,1,12,1,41,1,1,1,1,4,1,46,8,1,11,1,12,1,47,3,1,50,8,1,
        1,1,1,1,1,2,4,2,55,8,2,11,2,12,2,56,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
        1,5,1,6,1,6,1,7,1,7,1,8,1,8,0,0,9,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,1,0,2,1,0,48,57,3,0,9,10,13,13,32,32,80,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,1,20,1,0,0,0,3,36,1,0,0,0,5,54,
        1,0,0,0,7,60,1,0,0,0,9,62,1,0,0,0,11,64,1,0,0,0,13,66,1,0,0,0,15,
        68,1,0,0,0,17,70,1,0,0,0,19,21,5,45,0,0,20,19,1,0,0,0,20,21,1,0,
        0,0,21,23,1,0,0,0,22,24,7,0,0,0,23,22,1,0,0,0,24,25,1,0,0,0,25,23,
        1,0,0,0,25,26,1,0,0,0,26,33,1,0,0,0,27,29,5,46,0,0,28,30,7,0,0,0,
        29,28,1,0,0,0,30,31,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,34,1,
        0,0,0,33,27,1,0,0,0,33,34,1,0,0,0,34,2,1,0,0,0,35,37,5,45,0,0,36,
        35,1,0,0,0,36,37,1,0,0,0,37,39,1,0,0,0,38,40,7,0,0,0,39,38,1,0,0,
        0,40,41,1,0,0,0,41,39,1,0,0,0,41,42,1,0,0,0,42,49,1,0,0,0,43,45,
        5,46,0,0,44,46,7,0,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,
        47,48,1,0,0,0,48,50,1,0,0,0,49,43,1,0,0,0,49,50,1,0,0,0,50,51,1,
        0,0,0,51,52,2,105,106,0,52,4,1,0,0,0,53,55,7,1,0,0,54,53,1,0,0,0,
        55,56,1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,58,1,0,0,0,58,59,6,
        2,0,0,59,6,1,0,0,0,60,61,5,43,0,0,61,8,1,0,0,0,62,63,5,45,0,0,63,
        10,1,0,0,0,64,65,5,42,0,0,65,12,1,0,0,0,66,67,5,47,0,0,67,14,1,0,
        0,0,68,69,5,40,0,0,69,16,1,0,0,0,70,71,5,41,0,0,71,18,1,0,0,0,10,
        0,20,25,31,33,36,41,47,49,56,1,6,0,0
    ]

class calLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    REAL = 1
    IMAGINARY = 2
    WS = 3
    PLUS = 4
    MINUS = 5
    MUL = 6
    DIV = 7
    LPAREN = 8
    RPAREN = 9

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "REAL", "IMAGINARY", "WS", "PLUS", "MINUS", "MUL", "DIV", "LPAREN", 
            "RPAREN" ]

    ruleNames = [ "REAL", "IMAGINARY", "WS", "PLUS", "MINUS", "MUL", "DIV", 
                  "LPAREN", "RPAREN" ]

    grammarFileName = "cal.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


